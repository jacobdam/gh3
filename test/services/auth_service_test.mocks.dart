// Mocks generated by Mockito 5.4.6 from annotations
// in gh3/test/services/auth_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:gh3/src/services/github_auth_client.dart' as _i2;
import 'package:gh3/src/services/scope_service.dart' as _i5;
import 'package:gh3/src/services/timer_service.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGithubDeviceCodeResult_0 extends _i1.SmartFake
    implements _i2.GithubDeviceCodeResult {
  _FakeGithubDeviceCodeResult_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GithubAuthClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockGithubAuthClient extends _i1.Mock implements _i2.GithubAuthClient {
  MockGithubAuthClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i2.GithubDeviceCodeResult> createDeviceCode(
    List<String>? scopes,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createDeviceCode, [scopes]),
            returnValue: _i3.Future<_i2.GithubDeviceCodeResult>.value(
              _FakeGithubDeviceCodeResult_0(
                this,
                Invocation.method(#createDeviceCode, [scopes]),
              ),
            ),
          )
          as _i3.Future<_i2.GithubDeviceCodeResult>);

  @override
  _i3.Future<String> createAccessTokenFromDeviceCode(String? deviceCode) =>
      (super.noSuchMethod(
            Invocation.method(#createAccessTokenFromDeviceCode, [deviceCode]),
            returnValue: _i3.Future<String>.value(
              _i4.dummyValue<String>(
                this,
                Invocation.method(#createAccessTokenFromDeviceCode, [
                  deviceCode,
                ]),
              ),
            ),
          )
          as _i3.Future<String>);
}

/// A class which mocks [IScopeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIScopeService extends _i1.Mock implements _i5.IScopeService {
  MockIScopeService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<String>> getScopesFromAccessToken(String? accessToken) =>
      (super.noSuchMethod(
            Invocation.method(#getScopesFromAccessToken, [accessToken]),
            returnValue: _i3.Future<List<String>>.value(<String>[]),
          )
          as _i3.Future<List<String>>);
}

/// A class which mocks [TimerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTimerService extends _i1.Mock implements _i6.TimerService {
  MockTimerService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> delay(Duration? duration) =>
      (super.noSuchMethod(
            Invocation.method(#delay, [duration]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
