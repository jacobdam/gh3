// Mocks generated by Mockito 5.4.6 from annotations
// in gh3/test/app_start_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:ferry/ferry.dart' as _i7;
import 'package:ferry/src/fetch_policy_typed_link.dart' as _i2;
import 'package:gh3/src/models/github_repository.dart' as _i6;
import 'package:gh3/src/models/github_user.dart' as _i5;
import 'package:gh3/src/services/auth_service.dart' as _i14;
import 'package:gh3/src/services/github_api_service.dart' as _i13;
import 'package:gh3/src/services/github_auth_client.dart' as _i4;
import 'package:gh3/src/services/scope_service.dart' as _i11;
import 'package:gh3/src/services/timer_service.dart' as _i12;
import 'package:gh3/src/services/token_storage.dart' as _i10;
import 'package:gql/ast.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLink_0 extends _i1.SmartFake implements _i2.Link {
  _FakeLink_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCache_1 extends _i1.SmartFake implements _i2.Cache {
  _FakeCache_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreamController_2<T> extends _i1.SmartFake
    implements _i3.StreamController<T> {
  _FakeStreamController_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTypedLink_3 extends _i1.SmartFake implements _i2.TypedLink {
  _FakeTypedLink_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGithubDeviceCodeResult_4 extends _i1.SmartFake
    implements _i4.GithubDeviceCodeResult {
  _FakeGithubDeviceCodeResult_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGitHubUser_5 extends _i1.SmartFake implements _i5.GitHubUser {
  _FakeGitHubUser_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGitHubRepository_6 extends _i1.SmartFake
    implements _i6.GitHubRepository {
  _FakeGitHubRepository_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i7.Client {
  @override
  _i2.Link get link =>
      (super.noSuchMethod(
            Invocation.getter(#link),
            returnValue: _FakeLink_0(this, Invocation.getter(#link)),
            returnValueForMissingStub: _FakeLink_0(
              this,
              Invocation.getter(#link),
            ),
          )
          as _i2.Link);

  @override
  Map<String, _i2.TypePolicy> get typePolicies =>
      (super.noSuchMethod(
            Invocation.getter(#typePolicies),
            returnValue: <String, _i2.TypePolicy>{},
            returnValueForMissingStub: <String, _i2.TypePolicy>{},
          )
          as Map<String, _i2.TypePolicy>);

  @override
  Map<String, Function> get updateCacheHandlers =>
      (super.noSuchMethod(
            Invocation.getter(#updateCacheHandlers),
            returnValue: <String, Function>{},
            returnValueForMissingStub: <String, Function>{},
          )
          as Map<String, Function>);

  @override
  Map<_i8.OperationType, _i2.FetchPolicy> get defaultFetchPolicies =>
      (super.noSuchMethod(
            Invocation.getter(#defaultFetchPolicies),
            returnValue: <_i8.OperationType, _i2.FetchPolicy>{},
            returnValueForMissingStub: <_i8.OperationType, _i2.FetchPolicy>{},
          )
          as Map<_i8.OperationType, _i2.FetchPolicy>);

  @override
  bool get addTypename =>
      (super.noSuchMethod(
            Invocation.getter(#addTypename),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i2.Cache get cache =>
      (super.noSuchMethod(
            Invocation.getter(#cache),
            returnValue: _FakeCache_1(this, Invocation.getter(#cache)),
            returnValueForMissingStub: _FakeCache_1(
              this,
              Invocation.getter(#cache),
            ),
          )
          as _i2.Cache);

  @override
  _i3.StreamController<_i2.OperationRequest<dynamic, dynamic>>
  get requestController =>
      (super.noSuchMethod(
            Invocation.getter(#requestController),
            returnValue:
                _FakeStreamController_2<_i2.OperationRequest<dynamic, dynamic>>(
                  this,
                  Invocation.getter(#requestController),
                ),
            returnValueForMissingStub:
                _FakeStreamController_2<_i2.OperationRequest<dynamic, dynamic>>(
                  this,
                  Invocation.getter(#requestController),
                ),
          )
          as _i3.StreamController<_i2.OperationRequest<dynamic, dynamic>>);

  @override
  set cache(_i2.Cache? _cache) => super.noSuchMethod(
    Invocation.setter(#cache, _cache),
    returnValueForMissingStub: null,
  );

  @override
  set requestController(
    _i3.StreamController<_i2.OperationRequest<dynamic, dynamic>>?
    _requestController,
  ) => super.noSuchMethod(
    Invocation.setter(#requestController, _requestController),
    returnValueForMissingStub: null,
  );

  @override
  _i3.Future<void> dispose() =>
      (super.noSuchMethod(
            Invocation.method(#dispose, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Stream<_i2.OperationResponse<TData, TVars>> request<TData, TVars>(
    _i2.OperationRequest<TData, TVars>? request, [
    _i2.NextTypedLink<TData, TVars>? forward,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#request, [request, forward]),
            returnValue:
                _i3.Stream<_i2.OperationResponse<TData, TVars>>.empty(),
            returnValueForMissingStub:
                _i3.Stream<_i2.OperationResponse<TData, TVars>>.empty(),
          )
          as _i3.Stream<_i2.OperationResponse<TData, TVars>>);

  @override
  _i2.TypedLink concat(_i2.TypedLink? next) =>
      (super.noSuchMethod(
            Invocation.method(#concat, [next]),
            returnValue: _FakeTypedLink_3(
              this,
              Invocation.method(#concat, [next]),
            ),
            returnValueForMissingStub: _FakeTypedLink_3(
              this,
              Invocation.method(#concat, [next]),
            ),
          )
          as _i2.TypedLink);

  @override
  _i2.TypedLink route(_i2.TypedLinkRouter<dynamic, dynamic>? route) =>
      (super.noSuchMethod(
            Invocation.method(#route, [route]),
            returnValue: _FakeTypedLink_3(
              this,
              Invocation.method(#route, [route]),
            ),
            returnValueForMissingStub: _FakeTypedLink_3(
              this,
              Invocation.method(#route, [route]),
            ),
          )
          as _i2.TypedLink);

  @override
  _i2.TypedLink split(
    bool Function<TData, TVars>(_i2.OperationRequest<TData, TVars>)? test,
    _i2.TypedLink? left, [
    _i2.TypedLink? right = const _i2.PassthroughTypedLink(),
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#split, [test, left, right]),
            returnValue: _FakeTypedLink_3(
              this,
              Invocation.method(#split, [test, left, right]),
            ),
            returnValueForMissingStub: _FakeTypedLink_3(
              this,
              Invocation.method(#split, [test, left, right]),
            ),
          )
          as _i2.TypedLink);
}

/// A class which mocks [GithubAuthClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockGithubAuthClient extends _i1.Mock implements _i4.GithubAuthClient {
  @override
  _i3.Future<_i4.GithubDeviceCodeResult> createDeviceCode(
    List<String>? scopes,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createDeviceCode, [scopes]),
            returnValue: _i3.Future<_i4.GithubDeviceCodeResult>.value(
              _FakeGithubDeviceCodeResult_4(
                this,
                Invocation.method(#createDeviceCode, [scopes]),
              ),
            ),
            returnValueForMissingStub:
                _i3.Future<_i4.GithubDeviceCodeResult>.value(
                  _FakeGithubDeviceCodeResult_4(
                    this,
                    Invocation.method(#createDeviceCode, [scopes]),
                  ),
                ),
          )
          as _i3.Future<_i4.GithubDeviceCodeResult>);

  @override
  _i3.Future<String> createAccessTokenFromDeviceCode(String? deviceCode) =>
      (super.noSuchMethod(
            Invocation.method(#createAccessTokenFromDeviceCode, [deviceCode]),
            returnValue: _i3.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(#createAccessTokenFromDeviceCode, [
                  deviceCode,
                ]),
              ),
            ),
            returnValueForMissingStub: _i3.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(#createAccessTokenFromDeviceCode, [
                  deviceCode,
                ]),
              ),
            ),
          )
          as _i3.Future<String>);
}

/// A class which mocks [ITokenStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockITokenStorage extends _i1.Mock implements _i10.ITokenStorage {
  @override
  _i3.Future<String?> getToken() =>
      (super.noSuchMethod(
            Invocation.method(#getToken, []),
            returnValue: _i3.Future<String?>.value(),
            returnValueForMissingStub: _i3.Future<String?>.value(),
          )
          as _i3.Future<String?>);

  @override
  _i3.Future<void> saveToken(String? token) =>
      (super.noSuchMethod(
            Invocation.method(#saveToken, [token]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteToken() =>
      (super.noSuchMethod(
            Invocation.method(#deleteToken, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [IScopeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIScopeService extends _i1.Mock implements _i11.IScopeService {
  @override
  _i3.Future<List<String>> getScopesFromAccessToken(String? accessToken) =>
      (super.noSuchMethod(
            Invocation.method(#getScopesFromAccessToken, [accessToken]),
            returnValue: _i3.Future<List<String>>.value(<String>[]),
            returnValueForMissingStub: _i3.Future<List<String>>.value(
              <String>[],
            ),
          )
          as _i3.Future<List<String>>);
}

/// A class which mocks [TimerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTimerService extends _i1.Mock implements _i12.TimerService {
  @override
  _i3.Future<void> delay(Duration? duration) =>
      (super.noSuchMethod(
            Invocation.method(#delay, [duration]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [GitHubApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGitHubApiService extends _i1.Mock implements _i13.GitHubApiService {
  @override
  _i3.Future<_i5.GitHubUser> getAuthenticatedUser() =>
      (super.noSuchMethod(
            Invocation.method(#getAuthenticatedUser, []),
            returnValue: _i3.Future<_i5.GitHubUser>.value(
              _FakeGitHubUser_5(
                this,
                Invocation.method(#getAuthenticatedUser, []),
              ),
            ),
            returnValueForMissingStub: _i3.Future<_i5.GitHubUser>.value(
              _FakeGitHubUser_5(
                this,
                Invocation.method(#getAuthenticatedUser, []),
              ),
            ),
          )
          as _i3.Future<_i5.GitHubUser>);

  @override
  _i3.Future<_i5.GitHubUser> getUser(String? username) =>
      (super.noSuchMethod(
            Invocation.method(#getUser, [username]),
            returnValue: _i3.Future<_i5.GitHubUser>.value(
              _FakeGitHubUser_5(this, Invocation.method(#getUser, [username])),
            ),
            returnValueForMissingStub: _i3.Future<_i5.GitHubUser>.value(
              _FakeGitHubUser_5(this, Invocation.method(#getUser, [username])),
            ),
          )
          as _i3.Future<_i5.GitHubUser>);

  @override
  _i3.Future<List<_i5.GitHubUser>> getFollowing({
    int? page = 1,
    int? perPage = 30,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getFollowing, [], {
              #page: page,
              #perPage: perPage,
            }),
            returnValue: _i3.Future<List<_i5.GitHubUser>>.value(
              <_i5.GitHubUser>[],
            ),
            returnValueForMissingStub: _i3.Future<List<_i5.GitHubUser>>.value(
              <_i5.GitHubUser>[],
            ),
          )
          as _i3.Future<List<_i5.GitHubUser>>);

  @override
  _i3.Future<List<_i5.GitHubUser>> getUserFollowers(
    String? username, {
    int? page = 1,
    int? perPage = 30,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getUserFollowers,
              [username],
              {#page: page, #perPage: perPage},
            ),
            returnValue: _i3.Future<List<_i5.GitHubUser>>.value(
              <_i5.GitHubUser>[],
            ),
            returnValueForMissingStub: _i3.Future<List<_i5.GitHubUser>>.value(
              <_i5.GitHubUser>[],
            ),
          )
          as _i3.Future<List<_i5.GitHubUser>>);

  @override
  _i3.Future<List<_i6.GitHubRepository>> getUserRepositories(
    String? username, {
    int? page = 1,
    int? perPage = 30,
    String? sort = 'updated',
    String? direction = 'desc',
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getUserRepositories,
              [username],
              {
                #page: page,
                #perPage: perPage,
                #sort: sort,
                #direction: direction,
              },
            ),
            returnValue: _i3.Future<List<_i6.GitHubRepository>>.value(
              <_i6.GitHubRepository>[],
            ),
            returnValueForMissingStub:
                _i3.Future<List<_i6.GitHubRepository>>.value(
                  <_i6.GitHubRepository>[],
                ),
          )
          as _i3.Future<List<_i6.GitHubRepository>>);

  @override
  _i3.Future<_i6.GitHubRepository> getRepository(String? owner, String? repo) =>
      (super.noSuchMethod(
            Invocation.method(#getRepository, [owner, repo]),
            returnValue: _i3.Future<_i6.GitHubRepository>.value(
              _FakeGitHubRepository_6(
                this,
                Invocation.method(#getRepository, [owner, repo]),
              ),
            ),
            returnValueForMissingStub: _i3.Future<_i6.GitHubRepository>.value(
              _FakeGitHubRepository_6(
                this,
                Invocation.method(#getRepository, [owner, repo]),
              ),
            ),
          )
          as _i3.Future<_i6.GitHubRepository>);

  @override
  _i3.Future<String> getRepositoryReadme(String? owner, String? repo) =>
      (super.noSuchMethod(
            Invocation.method(#getRepositoryReadme, [owner, repo]),
            returnValue: _i3.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(#getRepositoryReadme, [owner, repo]),
              ),
            ),
            returnValueForMissingStub: _i3.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(#getRepositoryReadme, [owner, repo]),
              ),
            ),
          )
          as _i3.Future<String>);
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i14.AuthService {
  @override
  bool get isLoggedIn =>
      (super.noSuchMethod(
            Invocation.getter(#isLoggedIn),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i3.Future<void> init() =>
      (super.noSuchMethod(
            Invocation.method(#init, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<String> login() =>
      (super.noSuchMethod(
            Invocation.method(#login, []),
            returnValue: _i3.Future<String>.value(
              _i9.dummyValue<String>(this, Invocation.method(#login, [])),
            ),
            returnValueForMissingStub: _i3.Future<String>.value(
              _i9.dummyValue<String>(this, Invocation.method(#login, [])),
            ),
          )
          as _i3.Future<String>);

  @override
  _i3.Future<String> loginWithDeviceCode(String? deviceCode) =>
      (super.noSuchMethod(
            Invocation.method(#loginWithDeviceCode, [deviceCode]),
            returnValue: _i3.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(#loginWithDeviceCode, [deviceCode]),
              ),
            ),
            returnValueForMissingStub: _i3.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(#loginWithDeviceCode, [deviceCode]),
              ),
            ),
          )
          as _i3.Future<String>);

  @override
  _i3.Future<void> logout() =>
      (super.noSuchMethod(
            Invocation.method(#logout, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
